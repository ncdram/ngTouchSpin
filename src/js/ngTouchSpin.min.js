"use strict"
function ngTouchSpinDirective(e,n,a){return{restrict:"EA",require:"?ngModel",scope:{min:"=?",max:"=?",step:"=?",prefix:"=?",postfix:"=?",decimals:"=?",stepInterval:"=?",stepIntervalDelay:"=?",initval:"=?",val:"=?",onChange:"=?"},replace:!0,link:function(t,i,l,s){function o(){t.min=parseFloat(Number(t.min))||0,t.max=parseFloat(Number(t.max))||100,t.step=t.step||1,t.prefix=t.prefix||void 0,t.postfix=t.postfix||void 0,t.decimals=parseInt(t.decimals)||0,t.stepInterval=t.stepInterval||100,t.stepIntervalDelay=t.stepIntervalDelay||500,t.initval=t.initval||"",t.val=t.value||t.initval,t.onChange=t.onChange||function(){}}function u(){""==s.$modelValue&&t.val&&s.$setViewValue(t.val)}o()
var p,c,r,v=(a.find("body"),t.val)
s.$setViewValue(t.val),t.onChange(t.val),t.focused=!1,t.decrement=function(){v=t.val
var e=parseFloat(parseFloat(Number(t.val))-parseFloat(t.step)).toFixed(t.decimals)
return e<t.min?(e=parseFloat(t.min).toFixed(t.decimals),t.val=e,void s.$setViewValue(e)):(t.val=e,s.$setViewValue(e),void t.onChange(t.val))},t.increment=function(){v=t.val
var e=parseFloat(parseFloat(Number(t.val))+parseFloat(t.step)).toFixed(t.decimals)
e>t.max||(t.val=e,s.$setViewValue(e),t.onChange(t.val))},t.startSpinUp=function(){t.checkValue(),t.increment(),r=Date.now(),t.stopSpin(),e(function(){c=n(function(){t.increment()},t.stepInterval)},t.stepIntervalDelay)},t.startSpinDown=function(){t.checkValue(),t.decrement(),r=Date.now()
e(function(){c=n(function(){t.decrement()},t.stepInterval)},t.stepIntervalDelay)},t.stopSpin=function(){Date.now()-r>t.stepIntervalDelay?(e.cancel(p),n.cancel(c)):e(function(){e.cancel(p),n.cancel(c)},t.stepIntervalDelay)},t.checkValue=function(){var e
""===t.val||t.val.match(/^-?(?:\d+|\d*\.\d+)$/i)||(e=""!==v?parseFloat(v).toFixed(t.decimals):parseFloat(t.min).toFixed(t.decimals),t.val=e,s.$setViewValue(e)),t.focused=!1},t.updateValue=function(){var e=t.val
""!==e&&(e.match(/^-?(?:\d+|\d*\.\d+)$/i)?(e=parseFloat(e),e<t.min&&(e=t.min),e>t.max&&(e=t.max),e=e.toFixed(t.decimals)):e=v,t.val=e,s.$setViewValue(e),t.onChange(t.val))},t.handleEmptyValue=function(){var e=t.val
""===e&&l.value&&(e=l.value),t.val=e,s.$setViewValue(e),t.onChange(t.val)},s.$viewChangeListeners.push(u),t.focus=function(){t.focused=!0},s.$render=function(){t.val=s.$viewValue}},template:'<div class="input-group">  <span class="input-group-btn" ng-show="!verticalButtons">    <button type="button" class="btn btn-default" ng-mousedown="startSpinDown()" ng-mouseup="stopSpin()"><i class="fa fa-minus"></i></button>  </span>  <span class="input-group-addon" ng-show="prefix" ng-bind="prefix"></span>  <input type="text" ng-model="val" class="form-control" ng-change="updateValue()" ng-blur="handleEmptyValue()" ng-focus="focus()">  <span class="input-group-addon" ng-show="postfix" ng-bind="postfix"></span>  <span class="input-group-btn" ng-show="!verticalButtons">    <button type="button" class="btn btn-default" ng-mousedown="startSpinUp()" ng-mouseup="stopSpin()"><i class="fa fa-plus"></i></button>  </span></div>'}}angular.module("jkuri.touchspin",[]).directive("ngTouchSpin",ngTouchSpinDirective),ngTouchSpinDirective.$inject=["$timeout","$interval","$document"]
