"use strict"
function ngTouchSpinDirective(e,n,t,a){var i={left:37,right:39}
return{restrict:"EA",require:"?ngModel",scope:{min:"=?",max:"=?",step:"=?",prefix:"=?",postfix:"=?",decimals:"=?",stepInterval:"=?",stepIntervalDelay:"=?",initval:"=?",val:"=?",onChange:"=?"},replace:!0,link:function(l,o,s,u){function r(){l.min=parseFloat(Number(l.min))||0,l.max=parseFloat(Number(l.max))||100,l.step=l.step||1,l.prefix=l.prefix||void 0,l.postfix=l.postfix||void 0,l.decimals=l.decimals||0,l.stepInterval=l.stepInterval||100,l.stepIntervalDelay=l.stepIntervalDelay||500,l.initval=l.initval||"",l.val=l.value||l.initval,l.onChange=l.onChange||function(){}}function p(){""==u.$modelValue&&l.val&&u.$setViewValue(l.val)}r()
var c,v,d,f=t.find("body"),m=l.val
u.$setViewValue(l.val),l.onChange(l.val),l.focused=!1,l.decrement=function(){m=l.val
var e=parseFloat(parseFloat(Number(l.val))-parseFloat(l.step)).toFixed(l.decimals)
return e<l.min?(e=parseFloat(l.min).toFixed(l.decimals),l.val=e,void u.$setViewValue(e)):(l.val=e,u.$setViewValue(e),void l.onChange(l.val))},l.increment=function(){m=l.val
var e=parseFloat(parseFloat(Number(l.val))+parseFloat(l.step)).toFixed(l.decimals)
e>l.max||(l.val=e,u.$setViewValue(e),l.onChange(l.val))},l.startSpinUp=function(){l.checkValue(),l.increment(),d=Date.now(),l.stopSpin(),e(function(){v=n(function(){l.increment()},l.stepInterval)},l.stepIntervalDelay)},l.startSpinDown=function(){l.checkValue(),l.decrement(),d=Date.now()
e(function(){v=n(function(){l.decrement()},l.stepInterval)},l.stepIntervalDelay)},l.stopSpin=function(){Date.now()-d>l.stepIntervalDelay?(e.cancel(c),n.cancel(v)):e(function(){e.cancel(c),n.cancel(v)},l.stepIntervalDelay)},l.checkValue=function(){var e
""===l.val||l.val.match(/^-?(?:\d+|\d*\.\d+)$/i)||(e=""!==m?parseFloat(m).toFixed(l.decimals):parseFloat(l.min).toFixed(l.decimals),l.val=e,u.$setViewValue(e)),l.focused=!1},l.updateValue=function(){var e=l.val
""!==e&&(e.match(/^-?(?:\d+|\d*\.\d+)$/i)?(e=parseFloat(e),e<l.min&&(e=l.min),e>l.max&&(e=l.max),e=e.toFixed(l.decimals)):e=m,l.val=e,u.$setViewValue(e),l.onChange(l.val))},l.handleEmptyValue=function(){var e=l.val
""===e&&s.value&&(e=s.value),l.val=e,u.$setViewValue(e),l.onChange(l.val)},u.$viewChangeListeners.push(p),l.focus=function(){l.focused=!0},u.$render=function(){l.val=u.$viewValue},a.arrowControlsEnabled()&&f.bind("keydown",function(e){if(l.focused){e.preventDefault()
var n=e.which
n===i.right?l.increment():n===i.left&&l.decrement(),l.$apply()}})},template:'<div class="input-group">  <span class="input-group-btn" ng-show="!verticalButtons">    <button type="button" class="btn btn-default" ng-mousedown="startSpinDown()" ng-mouseup="stopSpin()"><i class="fa fa-minus"></i></button>  </span>  <span class="input-group-addon" ng-show="prefix" ng-bind="prefix"></span>  <input type="text" ng-model="val" class="form-control" ng-change="updateValue()" ng-blur="handleEmptyValue()" ng-focus="focus()">  <span class="input-group-addon" ng-show="postfix" ng-bind="postfix"></span>  <span class="input-group-btn" ng-show="!verticalButtons">    <button type="button" class="btn btn-default" ng-mousedown="startSpinUp()" ng-mouseup="stopSpin()"><i class="fa fa-plus"></i></button>  </span></div>'}}function ngTouchSpinProvider(){var e=!0
this.arrowControlsEnabled=function(n){return angular.isDefined(n)?(e=n,this):e},this.$get=function(){return this}}angular.module("jkuri.touchspin",[]).provider("ngTouchSpin",ngTouchSpinProvider).directive("ngTouchSpin",ngTouchSpinDirective),ngTouchSpinDirective.$inject=["$timeout","$interval","$document","ngTouchSpin"]
